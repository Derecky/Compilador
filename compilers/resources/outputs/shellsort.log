   1  pgm
          [0001, 0001] (0000,                  pgm) {pgm}
   2    int vet [ 10 ] ;
          [0002, 0003] (0001,                dlint) {int}
          [0002, 0007] (0021,           identifier) {vet}
          [0002, 0011] (0045,            squarebeg) {[}
          [0002, 0013] (0001,                dlint) {10}
          [0002, 0016] (0046,            squareend) {]}
          [0002, 0018] (0052,            semicolon) {;}
   3    int n ;
          [0003, 0003] (0001,                dlint) {int}
          [0003, 0007] (0021,           identifier) {n}
          [0003, 0009] (0052,            semicolon) {;}
   4    int func shellsort ( int v [ ] , int tam ) {
          [0004, 0003] (0001,                dlint) {int}
          [0004, 0007] (0020,                 func) {func}
          [0004, 0012] (0021,           identifier) {shellsort}
          [0004, 0022] (0047,           parenthbeg) {(}
          [0004, 0024] (0001,                dlint) {int}
          [0004, 0028] (0021,           identifier) {v}
          [0004, 0030] (0045,            squarebeg) {[}
          [0004, 0032] (0046,            squareend) {]}
          [0004, 0034] (0053,                comma) {,}
          [0004, 0036] (0001,                dlint) {int}
          [0004, 0040] (0021,           identifier) {tam}
          [0004, 0044] (0048,            parentend) {)}
          [0004, 0046] (0049,               keybeg) {{}
   5      
   6      int i , j , h ;
          [0006, 0005] (0001,                dlint) {int}
          [0006, 0009] (0021,           identifier) {i}
          [0006, 0011] (0053,                comma) {,}
          [0006, 0013] (0021,           identifier) {j}
          [0006, 0015] (0053,                comma) {,}
          [0006, 0017] (0021,           identifier) {h}
          [0006, 0019] (0052,            semicolon) {;}
   7      int gap = 1 ;
          [0007, 0005] (0001,                dlint) {int}
          [0007, 0009] (0021,           identifier) {gap}
          [0007, 0013] (0044,               assign) {=}
          [0007, 0015] (0001,                dlint) {1}
          [0007, 0017] (0052,            semicolon) {;}
   8      while ( gap < tam ) {
          [0008, 0005] (0010,              dlwhile) {while}
          [0008, 0011] (0047,           parenthbeg) {(}
          [0008, 0013] (0021,           identifier) {gap}
          [0008, 0017] (0039,              smaller) {<}
          [0008, 0019] (0021,           identifier) {tam}
          [0008, 0023] (0048,            parentend) {)}
          [0008, 0025] (0049,               keybeg) {{}
   9        gap = 3 * gap + 1 ;
          [0009, 0007] (0021,           identifier) {gap}
          [0009, 0011] (0044,               assign) {=}
          [0009, 0013] (0001,                dlint) {3}
          [0009, 0015] (0029,                 mult) {*}
          [0009, 0017] (0021,           identifier) {gap}
          [0009, 0021] (0031,                 plus) {+}
          [0009, 0023] (0001,                dlint) {1}
          [0009, 0025] (0052,            semicolon) {;}
  10      }
          [0010, 0005] (0050,               keyend) {}}
  11      while ( gap > 1 ) {
          [0011, 0005] (0010,              dlwhile) {while}
          [0011, 0011] (0047,           parenthbeg) {(}
          [0011, 0013] (0021,           identifier) {gap}
          [0011, 0017] (0042,              greater) {>}
          [0011, 0019] (0001,                dlint) {1}
          [0011, 0021] (0048,            parentend) {)}
          [0011, 0023] (0049,               keybeg) {{}
  12        gap = gap / 3 ;
          [0012, 0007] (0021,           identifier) {gap}
          [0012, 0011] (0044,               assign) {=}
          [0012, 0013] (0021,           identifier) {gap}
          [0012, 0017] (0034,                  div) {/}
          [0012, 0019] (0001,                dlint) {3}
          [0012, 0021] (0052,            semicolon) {;}
  13        repeat i from gap to size {
          [0013, 0007] (0013,               repeat) {repeat}
          [0013, 0014] (0021,           identifier) {i}
          [0013, 0016] (0012,                 from) {from}
          [0013, 0021] (0021,           identifier) {gap}
          [0013, 0025] (0016,                   to) {to}
          [0013, 0028] (0021,           identifier) {size}
          [0013, 0033] (0049,               keybeg) {{}
  14          h = v [ i ] ;
          [0014, 0009] (0021,           identifier) {h}
          [0014, 0011] (0044,               assign) {=}
          [0014, 0013] (0021,           identifier) {v}
          [0014, 0015] (0045,            squarebeg) {[}
          [0014, 0017] (0021,           identifier) {i}
          [0014, 0019] (0046,            squareend) {]}
          [0014, 0021] (0052,            semicolon) {;}
  15          j = i ;
          [0015, 0009] (0021,           identifier) {j}
          [0015, 0011] (0044,               assign) {=}
          [0015, 0013] (0021,           identifier) {i}
          [0015, 0015] (0052,            semicolon) {;}
  16          while ( j >= gap and h < v [ j - gap ] ) {
          [0016, 0009] (0010,              dlwhile) {while}
          [0016, 0015] (0047,           parenthbeg) {(}
          [0016, 0017] (0021,           identifier) {j}
          [0016, 0019] (0041,             greatere) {>=}
          [0016, 0022] (0021,           identifier) {gap}
          [0016, 0026] (0021,           identifier) {and}
          [0016, 0030] (0021,           identifier) {h}
          [0016, 0032] (0039,              smaller) {<}
          [0016, 0034] (0021,           identifier) {v}
          [0016, 0036] (0045,            squarebeg) {[}
          [0016, 0038] (0021,           identifier) {j}
          [0016, 0040] (0032,                minus) {-}
          [0016, 0042] (0021,           identifier) {gap}
          [0016, 0046] (0046,            squareend) {]}
          [0016, 0048] (0048,            parentend) {)}
          [0016, 0050] (0049,               keybeg) {{}
  17            vet [ j ] = v [ j - gap ] ;
          [0017, 0011] (0021,           identifier) {vet}
          [0017, 0015] (0045,            squarebeg) {[}
          [0017, 0017] (0021,           identifier) {j}
          [0017, 0019] (0046,            squareend) {]}
          [0017, 0021] (0044,               assign) {=}
          [0017, 0023] (0021,           identifier) {v}
          [0017, 0025] (0045,            squarebeg) {[}
          [0017, 0027] (0021,           identifier) {j}
          [0017, 0029] (0032,                minus) {-}
          [0017, 0031] (0021,           identifier) {gap}
          [0017, 0035] (0046,            squareend) {]}
          [0017, 0037] (0052,            semicolon) {;}
  18            j = j - gap ;
          [0018, 0011] (0021,           identifier) {j}
          [0018, 0013] (0044,               assign) {=}
          [0018, 0015] (0021,           identifier) {j}
          [0018, 0017] (0032,                minus) {-}
          [0018, 0019] (0021,           identifier) {gap}
          [0018, 0023] (0052,            semicolon) {;}
  19          }
          [0019, 0009] (0050,               keyend) {}}
  20          v [ j ] = value;
          [0020, 0009] (0021,           identifier) {v}
          [0020, 0011] (0045,            squarebeg) {[}
          [0020, 0013] (0021,           identifier) {j}
          [0020, 0015] (0046,            squareend) {]}
          [0020, 0017] (0044,               assign) {=}
          [0020, 0019] (0021,           identifier) {value}
          [0020, 0024] (0052,            semicolon) {;}
  21        }
          [0021, 0007] (0050,               keyend) {}}
  22      }
          [0022, 0005] (0050,               keyend) {}}
  23     return v;
          [0023, 0004] (0011,             dlreturn) {return}
          [0023, 0011] (0021,           identifier) {v}
          [0023, 0012] (0052,            semicolon) {;}
  24  
  25    }
          [0025, 0003] (0050,               keyend) {}}
  26    
  27    main {
          [0027, 0003] (0014,                 main) {main}
          [0027, 0008] (0049,               keybeg) {{}
  28     vet = [ 2 , 3 , 4 , 0 , 9 , 7 , 8 , 1 , 5 , 6 ] ;
          [0028, 0004] (0021,           identifier) {vet}
          [0028, 0008] (0044,               assign) {=}
          [0028, 0010] (0045,            squarebeg) {[}
          [0028, 0012] (0001,                dlint) {2}
          [0028, 0014] (0053,                comma) {,}
          [0028, 0016] (0001,                dlint) {3}
          [0028, 0018] (0053,                comma) {,}
          [0028, 0020] (0001,                dlint) {4}
          [0028, 0022] (0053,                comma) {,}
          [0028, 0024] (0001,                dlint) {0}
          [0028, 0026] (0053,                comma) {,}
          [0028, 0028] (0001,                dlint) {9}
          [0028, 0030] (0053,                comma) {,}
          [0028, 0032] (0001,                dlint) {7}
          [0028, 0034] (0053,                comma) {,}
          [0028, 0036] (0001,                dlint) {8}
          [0028, 0038] (0053,                comma) {,}
          [0028, 0040] (0001,                dlint) {1}
          [0028, 0042] (0053,                comma) {,}
          [0028, 0044] (0001,                dlint) {5}
          [0028, 0046] (0053,                comma) {,}
          [0028, 0048] (0001,                dlint) {6}
          [0028, 0050] (0046,            squareend) {]}
          [0028, 0052] (0052,            semicolon) {;}
  29     
  30     int x ;
          [0030, 0004] (0001,                dlint) {int}
          [0030, 0008] (0021,           identifier) {x}
          [0030, 0010] (0052,            semicolon) {;}
  31     print ( vet ) ;
          [0031, 0004] (0019,                print) {print}
          [0031, 0010] (0047,           parenthbeg) {(}
          [0031, 0012] (0021,           identifier) {vet}
          [0031, 0016] (0048,            parentend) {)}
          [0031, 0018] (0052,            semicolon) {;}
  32     vet = shellsort ( vet , 10 ) ;
          [0032, 0004] (0021,           identifier) {vet}
          [0032, 0008] (0044,               assign) {=}
          [0032, 0010] (0021,           identifier) {shellsort}
          [0032, 0020] (0047,           parenthbeg) {(}
          [0032, 0022] (0021,           identifier) {vet}
          [0032, 0026] (0053,                comma) {,}
          [0032, 0028] (0001,                dlint) {10}
          [0032, 0031] (0048,            parentend) {)}
          [0032, 0033] (0052,            semicolon) {;}
  33     print ( vet ) ;
          [0033, 0004] (0019,                print) {print}
          [0033, 0010] (0047,           parenthbeg) {(}
          [0033, 0012] (0021,           identifier) {vet}
          [0033, 0016] (0048,            parentend) {)}
          [0033, 0018] (0052,            semicolon) {;}
  34    }
          [0034, 0003] (0050,               keyend) {}}
  35  end_pgm
          [0035, 0001] (0015,               endpgm) {end_pgm}
